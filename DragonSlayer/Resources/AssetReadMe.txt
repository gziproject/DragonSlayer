目录结构说明:
ani: 存放所有角色动作目录, 包括骨骼动画和序列帧动画;
cfg: 存放所有配置文件, 常用的配置文件格式有CSV和XML.
fonts: 字体库, ttf文件或bmfont文件, 用来管理字体
effect: 存放所有特效, 主要是粒子文件, 其它特效文件未研究使用, 但也归属于该目录.
images: 存放所有资源, 主要是无法归类, 或是极为通用的文件, 可以理解为边角料式的文件. 如果项目较小, 可以把所有资源都放近这目录下, 免去分类这一纠结的工作.
music: 存放所有音乐文件, 跟音乐有关如背景音乐, 音乐特效等.
ui: 场景的用户交互层, 所有ui都存放于此, 与images不同, ui文件具有针对性, 针对某个场景, 而且与用户相关.
templet: 原始资源, 更新的资源美术不清楚放哪可以上传至该目录下做备份.

另外一点, 如果嫌太多文件不好理解, 可以将ui放images下面.

资源id说明:
资源id没有固定的格式, 具体根据游戏需求来定出较为合适的命名方式, 这里说个大概.
游戏很多时候由多个场景组成, 以一个场景为单位来进行id归类, 公用的资源则使用相同命名方式.
通常特有资源: 背景, ui
共有的资源: 动作

动作: 动作一般是一个角色的, 角色编号一般为: 1001, 或者role1001, 动作编号一般会有一个枚举来对应 比如: move = 1, attack = 3, die = 2等等.
角色编号_动作编号.后缀
示例: role_1001_1.json

特有资源说明:
场景一般指mainmenu主菜单, shop商店, introduction介绍等等. 如果所用通用一张背景, 可以名为bg_scene.png, 用途是比如一个战斗场景背景分多层: bg_game_layer1.png, 说明这是第一层. 否则就省略了. 菜单项, 一般每个菜单项都有意义, 如果为物品, 可以名为武器的名字, 状态则有3种, 正常, 按下, 不可用.

ui: 使用ui开头代表这是一个ui资源
ui_场景_用途.后缀

背景: 使用bg开头代表这是一个ui资源
bg_场景_用途.后缀

菜单项:使用m开头代表这是一个ui资源
m_场景_菜单项_状态.后缀


最后就是这些的目录归类, 动作不用说, 放ani里. 其它的背景可以将这些统一放到ui或images目录下.
